title:
  german: Nat√ºrliche Zahlen runden
  english: Rounding natural numbers
description: The student sees a number between 100 and 9999 and have to round it to
  the nearest hundred
example: 'Number: 6537 Correct Answer: 6500'
topic_id: 18
template: 01_simple_question_answer
text:
  text_question:
    german: 'Runde auf Hunderter.'
    english: 'Round to the nearest hundred.'
pyscript:
  imports: |
    import random
    from pyscript import document
    from pyweb import pydom
  globals: |
    answer = 0
  checker: |
    def check_answer(event):
      user_answer = document.getElementById('answerField').value
      if user_answer.isnumeric():
          user_answer = int(user_answer)
          is_correct = True if user_answer == answer else False
      else:
          is_correct = False

      return [is_correct, answer, user_answer]
  generator: |
    def generate_number():
      number = 0
      while number % 100 == 0:
        number = random.randint(100, 9999)
      return number
      
    def generate(parent):
      global answer, number

      number = generate_number()
      rounded_number = round(number, -2)
      answer = rounded_number

      question_element, answer_element = generate_template(parent)
      question_span = document.createElement("span")
      mf = document.createElement("math-field")
      mf.readonly = True
      question_label = document.createElement("p")
      mf.innerHTML = f"{number}"
      question_span.append(question_label)
      question_label.innerHTML = "{{ text.text_question }}"
      question_span.append(mf)
      question_element.append(question_span)

      answer_field = document.createElement("input")
      answer_field.className = 'input input-bordered w-full max-w-xs'
      answer_field.id = 'answerField'
      answer_element.append(answer_field)

  details: | 
    def get_details():
      return f"The number that should be rounded is {number}. Therefore the correct answer is {answer}"
